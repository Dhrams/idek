

#+BEGIN_SRC ipython :noweb yes :session
# Class Definition of Neural Net
<<NeuralNet>>
#+END_SRC

#+RESULTS:
: # Out[8]:

#+BEGIN_SRC ipython :session
net = NeuralNet(input_node_size = 3,
                output_node_size = 3,
                hidden_layers_node_size = [4,4])
#+END_SRC

#+RESULTS:
: # Out[9]:

#+BEGIN_SRC ipython :session
net.model.fit(x_train, y_train, epochs=5, batch_size=32)
#+END_SRC



* NeuralNet
#+NAME: NeuralNet
#+BEGIN_SRC python :noweb yes :tangle neural.py
  class NeuralNet(object):

      def __init__(self,
                   input_node_size = None,               # Number of nodes in input layer
                   output_node_size = None,              # Number of nodes in output layer
                   hidden_layers_node_size = []          # Number of nodes in each hidden layer
                  ):
                      <<NeuralNet_init>>
#+END_SRC

#+NAME: NeuralNet_init
#+BEGIN_SRC python
          from keras.models import Sequential
          self.model = Sequential()
#+END_SRC

#+NAME: NeuralNet_init
#+BEGIN_SRC python
          from keras.layers import Dense
#+END_SRC

#+NAME: NeuralNet_init
#+BEGIN_SRC python
          # First layer requires input dimension ie input_node_size
          self.model.add(
                         Dense(units=64,
                               activation='relu',
                               input_dim=input_node_size
                               )
                        )
#+END_SRC

#+NAME: NeuralNet_init
#+BEGIN_SRC python
          # Add layers to model for all hidden layers
          for node_size in hidden_layers_node_size:
              self.model.add(
                             Dense(units=node_size,
                                   activation='relu'
                                   )
                            )
#+END_SRC

#+NAME: NeuralNet_init
#+BEGIN_SRC python
          # Last layer requires activation to be softmax
          self.model.add(
                         Dense(units=output_node_size,
                               activation='softmax'
                               )
                        )
#+END_SRC


#+NAME: NeuralNet_init
#+BEGIN_SRC python
          # Compile model
          self.model.compile(loss='categorical_crossentropy',
                             optimizer='sgd',
                             metrics=['accuracy'])
          #model.fit(x_train, y_train, epochs=5, batch_size=32)
#+END_SRC





